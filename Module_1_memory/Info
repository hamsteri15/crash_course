###Intro

In HPC applications, memory usage and access is of high importance. Many of the data operations encountered in CFD applications boil
down to manipulating contiguous chunks of double precission numbers a.k.a array operations. These operations include 

-the basic arithmetic operations: +, -, *, /, +=, etc.
-stencil operations: array2[i] = (array1[i-1] - array1[i+1])/dx (in 1d)
-reading and writing data from/to disk
-passing and receiving chunks of data to/from another process (mpi communication)


It is important to understand that in C++ the user has to handle memory allocation and release manually. This brings us 
to two different types of memory: static and dynamic memory. 

###Static Memory

Static memory is something that the compiler is smart enough to allocate and release for you. Moreover, the compiler can also do more optimization on static memory objects than on dynamic 
memory objects. The requirement of static memory, however, is that the amount of it has to be known by the
compiler at compile time. This is a severe limitation on the usage of static memory in CFD applications, simply because
more often than not we will want to change the array sizes based on user-input amount of grid points etc. A good example of static
memory is an initialization of a cartesian vector, which always has 3 components. Below two different cartesian vector objects
are defined and initialized

//struct form

//definition
struct CartesianVector{
    double x, y, z;
};

//initialization
CartesianVector vec1;

/*************************************/

//static array form

//definition
typedef double CartesianVector[3];

//initialization
CartesianVector vec2;


It is important to understand that at this point you havent done anything else than defined a type CartesianVector
and initialized variables vec1 and vec2 (which behave quite similarly). For instance CartesianVector v1 + CartesianVector v2
by default does not mean anything at this point. To be able to do arithmetic operations with the vectors, you would need
to define what the '+' operator means for your specific CartesianVector type. The '+' operator can be defined by
very handy 'operator overloading' feature in C++.

A word of caution is now in place. As mentioned before, the amount of static memory has to be known at compile time. 
Practically, this means that the following function is not valid:

void simple_function1(int size_of_static_memory){
    double array[size_of_static_memory]; 
}

In the above example compiler has no idea what the size_of_static_memory is unless its globally defined. The following example, however,
is valid code (although very bad)

int size_of_static_memory = 5; //define a global variable
void simple_function2(int size_of_static_memory){
    double array[size_of_static_memory]; 
}


###Dynamic Memory
Dynamic memory is more flexible than static memory in a sense that the amount of it can be arbitrary. However, the memory 
must be allocated and released by the user. An example of dynamic memory would be an array of doubles corresponding
to an nx amount of grid points in a one dimensional grid:

double* array = new double[nx];

/* do stuff with array */

delete [] array;

Note that the two keywords 'new' and 'delete' need to go hand in hand. Whenever, you call 'new' you need to call 'delete' as 
soon as you dont need the memory anymore. Also note that 'array' is not now really an array, it is actually the starting address
of a contiguous block of memory which is the size of nx * sizeof(double). However, from practical point of view you can treat
the variable as an array and for example the following code would be well defined

void d_dx(const double* in_array, double* out_array, int nx, double dx){

    for (int i = 1; i < (nx - 1); ++i){
        out_array[i] = (in_array[i + 1] - in_array[i - 1]) / dx ; 
    }

}

void caller(){

    int num_grid_points_x = read_nx_from_inputfile();

    double* input =  new double[num_grid_points_x];
    double* output = new double[num_grid_points_x];

    double stepsize = 0.1; 
    d_dx(input, output, num_grid_points_x, stepsize);

    delete [] input;
    delete [] output;

}


The above function 'd_dx' takes two arrays 'in_array' and 'out_array' and does a stencil operation on the in_array 
and stores the result in out_array. It assumes that memory has been allocated and will be freed
for both of them somewhere else in the program. In this case, the function 'caller' allocates and frees the memory. 

The following example would be equally valid code:


double* d_dx2(const double* in_array, int nx, double dx){

    double* out_array = new double[num_grid_points_x];

    for (int i = 1; i < (nx - 1); ++i){
        out_array[i] = (in_array[i + 1] - in_array[i - 1]) / dx ; 
    }
    return out_array;
}

void caller2(){

    int num_grid_points_x = read_nx_from_inputfile();

    double* input =  new double[num_grid_points_x];
    
    double stepsize = 0.1; 
    double* output = d_dx(input, num_grid_points_x, stepsize);

    delete [] input;
    delete [] output;

}

In the above example the function 'd_dx2' allocates the memory for the output array and the caller2 is responsible for 
freeing the memory. From the two derivative functions d_dx is more safe than d_dx2 because if the user forgets
to delete the memory for the output array, the program will accumulate memory usage i.e. 'leak memory'.   

###Multidimensional arrays
In the previous section we have only discussed one dimensional arrays. However, in CFD problems are often multidimensional 
and multidimensional arrays come in handy especially for simple structured grids. By default C++ does not 
offer (decent) multidimensional arrays. The previous statement is an opinion and the interested reader 
is referred to std::valarray. A standard way of handling multidimensional arrays in C++ is to wrap then
inside a class and define indexing operators for the array:

class Array2d{
	
public:

    //default constructor
    Array2d() : m_size(0), m_nx(0), m_ny(0), m_data(nullptr) {}

    //from 2d dimensions
    Array2d(int nx, int ny) : m_size(nx * ny), m_nx(nx), m_ny(ny) { 
        allocate(nx * ny); 
    }

    //destructor releases memory
    ~Array2d() { free(); }

    //lengths in x and y direction and the total size
    int nx() const   { return m_nx; }
    int ny() const   { return m_ny; }
    int size() const { return m_size; }


    //indexing operators
    inline const double& operator() (int i, int j) const { return m_data[m_nx*j + i]; }
    inline double& operator()       (int i, int j)       { return m_data[m_nx*j + i]; }

    

protected:
 
private:
    int             m_size;
    int             m_nx, m_ny;
    double*         m_data;

    void allocate(int size) { m_data = new double[size]; }  
    void free()             { delete [] m_data; }       	
};



In the above example the constructor Array2d(int nx, int ny) allocates a nx * ny chunk of memory and the destructor
~Array2d() releases the memory. This way the memory allocation/deallocation is hidden from the user of the class and 
the array class keeps track of the number of elements in each direction. If we now revisit the d_dx implementation
the stencil operations shown above the function could be of the form:


Array2d d_dx3(const Array2d& in_array, double dx){

    int nx = in_array.nx(); 
    int ny = in_array.ny();

    Array2d out_array(nx, ny);

    for (int j = 1; j < (ny - 1); ++j){
        for (int i = 1; i < (nx - 1); ++i){
            out_array(i,j) = ( in_array(i + 1, j) - in_array(i - 1, j) ) / dx ; 
        }
    }    
    return out_array;
}

void caller3(){

    int num_grid_points_x = read_nx_from_inputfile();
    int num_grid_points_y = read_ny_from_inputfile();

    Array2d input(nx, ny);
    
    double stepsize = 0.1; 
    Array2d output = d_dx(input, stepsize);

}

Note that there is now no need to call delete on the caller3(), because the destructor for Array2d is called
automatically when the objects go out of scope (at the end of the caller3() function ). The above implementation
is much safer than the d_dx and d_dx2. Note that in the above implementation we could have easily replaced
the private member 'double* m_data' in the Array2d class with the standard vector from the C++ STL: std::vector<double>.



###Combination of static and dynamic memory

As mentioned before, static objects are quite handy in some situations. In CFD, we often work with vectors of fixed size
for example the velocity vector is a good example. Let us now consider a naive implementation of a VectorField
object that works with vectors of static memory. First we define a _static_ vector of size N with support for arithmetic operations:

template<int L> //notice here that we template the length of the StaticVector instead of the type!
class StaticVector{

public:

    StaticVector() = default;

    //vector-scalar operations
    inline    StaticVector&              operator=    (const double& a);
    inline    StaticVector&              operator+=   (const double& a);
    inline    StaticVector&              operator*=   (const double& a);
    inline    StaticVector&              operator-=   (const double& a);
    inline    StaticVector&              operator/=   (const double& a);
    //... lots of more

    //vector-vector operations
    inline    StaticVector&              operator=    (const StaticVector& a);
    inline    StaticVector&              operator+=    (const StaticVector& a);
    //... lots of more



protected:

private:
    double m_data[L];    

};


Next we define a _dynamic_ container of the static objects, this has an analogy with the Array2d defined above
but since it supports arithmetic operations, we call it a Field2d instead


template<ElementType> //notice here we template the type of the element
class Field2d{

public:

    //default constructor
    Field2d() : m_size(0), m_nx(0), m_ny(0), m_data(nullptr) {}

    //from 2d dimensions
    Field2d(int nx, int ny) : m_size(nx * ny), m_nx(nx), m_ny(ny) { 
        allocate(nx * ny); 
    }

    //destructor releases memory
    ~Field2d() { free(); }


    //Field - Field operators
    inline    Field2d&              operator=     (const Field2d& a);
    inline    Field2&               operator+=    (const Field2d& a);
    //... lots of more

    
protected:

private:
    
    int                  m_size;
    int                  m_nx, m_ny;
    ElementType*         m_data;

    void allocate(int size) { m_data = new ElementType[size]; }  
    void free()             { delete [] m_data; }       

};


With the above two classes we could easily create and use a 2D vector field object like this:

void some_function(int nx, int ny){

    using Vector2d = StaticVector<2>;
    using VectorField2d = Field2d<Vector2d>

    VectorField2d f1(nx, ny);
    VectorField2d f2(nx, ny);

    VectorField2d f3 = f1 + f2*f1;
    //...

}


